/*
Zinc Search engine API

Zinc Search engine API documents https://docs.zincsearch.com

API version: 0.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MetaHTTPResponseTemplate struct for MetaHTTPResponseTemplate
type MetaHTTPResponseTemplate struct {
	Message *string `json:"message,omitempty"`
	Template *string `json:"template,omitempty"`
}

// NewMetaHTTPResponseTemplate instantiates a new MetaHTTPResponseTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaHTTPResponseTemplate() *MetaHTTPResponseTemplate {
	this := MetaHTTPResponseTemplate{}
	return &this
}

// NewMetaHTTPResponseTemplateWithDefaults instantiates a new MetaHTTPResponseTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaHTTPResponseTemplateWithDefaults() *MetaHTTPResponseTemplate {
	this := MetaHTTPResponseTemplate{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *MetaHTTPResponseTemplate) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseTemplate) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *MetaHTTPResponseTemplate) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *MetaHTTPResponseTemplate) SetMessage(v string) {
	o.Message = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *MetaHTTPResponseTemplate) GetTemplate() string {
	if o == nil || o.Template == nil {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaHTTPResponseTemplate) GetTemplateOk() (*string, bool) {
	if o == nil || o.Template == nil {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *MetaHTTPResponseTemplate) HasTemplate() bool {
	if o != nil && o.Template != nil {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *MetaHTTPResponseTemplate) SetTemplate(v string) {
	o.Template = &v
}

func (o MetaHTTPResponseTemplate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Template != nil {
		toSerialize["template"] = o.Template
	}
	return json.Marshal(toSerialize)
}

type NullableMetaHTTPResponseTemplate struct {
	value *MetaHTTPResponseTemplate
	isSet bool
}

func (v NullableMetaHTTPResponseTemplate) Get() *MetaHTTPResponseTemplate {
	return v.value
}

func (v *NullableMetaHTTPResponseTemplate) Set(val *MetaHTTPResponseTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaHTTPResponseTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaHTTPResponseTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaHTTPResponseTemplate(val *MetaHTTPResponseTemplate) *NullableMetaHTTPResponseTemplate {
	return &NullableMetaHTTPResponseTemplate{value: val, isSet: true}
}

func (v NullableMetaHTTPResponseTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaHTTPResponseTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


