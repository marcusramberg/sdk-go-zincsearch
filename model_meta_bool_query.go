/*
Zinc Search engine API

Zinc Search engine API documents https://docs.zincsearch.com

API version: 0.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MetaBoolQuery struct for MetaBoolQuery
type MetaBoolQuery struct {
	// query, [query1, query2]
	Filter []MetaQuery `json:"filter,omitempty"`
	// only for should
	MinimumShouldMatch *float32 `json:"minimum_should_match,omitempty"`
	// query, [query1, query2]
	Must []MetaQuery `json:"must,omitempty"`
	// query, [query1, query2]
	MustNot []MetaQuery `json:"must_not,omitempty"`
	// query, [query1, query2]
	Should []MetaQuery `json:"should,omitempty"`
}

// NewMetaBoolQuery instantiates a new MetaBoolQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaBoolQuery() *MetaBoolQuery {
	this := MetaBoolQuery{}
	return &this
}

// NewMetaBoolQueryWithDefaults instantiates a new MetaBoolQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaBoolQueryWithDefaults() *MetaBoolQuery {
	this := MetaBoolQuery{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *MetaBoolQuery) GetFilter() []MetaQuery {
	if o == nil || o.Filter == nil {
		var ret []MetaQuery
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaBoolQuery) GetFilterOk() ([]MetaQuery, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *MetaBoolQuery) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given []MetaQuery and assigns it to the Filter field.
func (o *MetaBoolQuery) SetFilter(v []MetaQuery) {
	o.Filter = v
}

// GetMinimumShouldMatch returns the MinimumShouldMatch field value if set, zero value otherwise.
func (o *MetaBoolQuery) GetMinimumShouldMatch() float32 {
	if o == nil || o.MinimumShouldMatch == nil {
		var ret float32
		return ret
	}
	return *o.MinimumShouldMatch
}

// GetMinimumShouldMatchOk returns a tuple with the MinimumShouldMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaBoolQuery) GetMinimumShouldMatchOk() (*float32, bool) {
	if o == nil || o.MinimumShouldMatch == nil {
		return nil, false
	}
	return o.MinimumShouldMatch, true
}

// HasMinimumShouldMatch returns a boolean if a field has been set.
func (o *MetaBoolQuery) HasMinimumShouldMatch() bool {
	if o != nil && o.MinimumShouldMatch != nil {
		return true
	}

	return false
}

// SetMinimumShouldMatch gets a reference to the given float32 and assigns it to the MinimumShouldMatch field.
func (o *MetaBoolQuery) SetMinimumShouldMatch(v float32) {
	o.MinimumShouldMatch = &v
}

// GetMust returns the Must field value if set, zero value otherwise.
func (o *MetaBoolQuery) GetMust() []MetaQuery {
	if o == nil || o.Must == nil {
		var ret []MetaQuery
		return ret
	}
	return o.Must
}

// GetMustOk returns a tuple with the Must field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaBoolQuery) GetMustOk() ([]MetaQuery, bool) {
	if o == nil || o.Must == nil {
		return nil, false
	}
	return o.Must, true
}

// HasMust returns a boolean if a field has been set.
func (o *MetaBoolQuery) HasMust() bool {
	if o != nil && o.Must != nil {
		return true
	}

	return false
}

// SetMust gets a reference to the given []MetaQuery and assigns it to the Must field.
func (o *MetaBoolQuery) SetMust(v []MetaQuery) {
	o.Must = v
}

// GetMustNot returns the MustNot field value if set, zero value otherwise.
func (o *MetaBoolQuery) GetMustNot() []MetaQuery {
	if o == nil || o.MustNot == nil {
		var ret []MetaQuery
		return ret
	}
	return o.MustNot
}

// GetMustNotOk returns a tuple with the MustNot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaBoolQuery) GetMustNotOk() ([]MetaQuery, bool) {
	if o == nil || o.MustNot == nil {
		return nil, false
	}
	return o.MustNot, true
}

// HasMustNot returns a boolean if a field has been set.
func (o *MetaBoolQuery) HasMustNot() bool {
	if o != nil && o.MustNot != nil {
		return true
	}

	return false
}

// SetMustNot gets a reference to the given []MetaQuery and assigns it to the MustNot field.
func (o *MetaBoolQuery) SetMustNot(v []MetaQuery) {
	o.MustNot = v
}

// GetShould returns the Should field value if set, zero value otherwise.
func (o *MetaBoolQuery) GetShould() []MetaQuery {
	if o == nil || o.Should == nil {
		var ret []MetaQuery
		return ret
	}
	return o.Should
}

// GetShouldOk returns a tuple with the Should field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaBoolQuery) GetShouldOk() ([]MetaQuery, bool) {
	if o == nil || o.Should == nil {
		return nil, false
	}
	return o.Should, true
}

// HasShould returns a boolean if a field has been set.
func (o *MetaBoolQuery) HasShould() bool {
	if o != nil && o.Should != nil {
		return true
	}

	return false
}

// SetShould gets a reference to the given []MetaQuery and assigns it to the Should field.
func (o *MetaBoolQuery) SetShould(v []MetaQuery) {
	o.Should = v
}

func (o MetaBoolQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.MinimumShouldMatch != nil {
		toSerialize["minimum_should_match"] = o.MinimumShouldMatch
	}
	if o.Must != nil {
		toSerialize["must"] = o.Must
	}
	if o.MustNot != nil {
		toSerialize["must_not"] = o.MustNot
	}
	if o.Should != nil {
		toSerialize["should"] = o.Should
	}
	return json.Marshal(toSerialize)
}

type NullableMetaBoolQuery struct {
	value *MetaBoolQuery
	isSet bool
}

func (v NullableMetaBoolQuery) Get() *MetaBoolQuery {
	return v.value
}

func (v *NullableMetaBoolQuery) Set(val *MetaBoolQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaBoolQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaBoolQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaBoolQuery(val *MetaBoolQuery) *NullableMetaBoolQuery {
	return &NullableMetaBoolQuery{value: val, isSet: true}
}

func (v NullableMetaBoolQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaBoolQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


