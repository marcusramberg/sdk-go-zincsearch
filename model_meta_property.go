/*
Zinc Search engine API

Zinc Search engine API documents https://docs.zincsearch.com

API version: 0.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MetaProperty struct for MetaProperty
type MetaProperty struct {
	Aggregatable *bool `json:"aggregatable,omitempty"`
	Analyzer *string `json:"analyzer,omitempty"`
	// Fields allow the same string value to be indexed in multiple ways for different purposes, such as one field for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers. If the Fields property is defined within a sub-field, it will be ignored.  Currently, only \"text\" fields support the Fields parameter.
	Fields *map[string]MetaProperty `json:"fields,omitempty"`
	// date format yyyy-MM-dd HH:mm:ss || yyyy-MM-dd || epoch_millis
	Format *string `json:"format,omitempty"`
	Highlightable *bool `json:"highlightable,omitempty"`
	Index *bool `json:"index,omitempty"`
	SearchAnalyzer *string `json:"search_analyzer,omitempty"`
	Sortable *bool `json:"sortable,omitempty"`
	Store *bool `json:"store,omitempty"`
	// date format time_zone
	TimeZone *string `json:"time_zone,omitempty"`
	// text, keyword, date, numeric, boolean, geo_point
	Type *string `json:"type,omitempty"`
}

// NewMetaProperty instantiates a new MetaProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaProperty() *MetaProperty {
	this := MetaProperty{}
	return &this
}

// NewMetaPropertyWithDefaults instantiates a new MetaProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaPropertyWithDefaults() *MetaProperty {
	this := MetaProperty{}
	return &this
}

// GetAggregatable returns the Aggregatable field value if set, zero value otherwise.
func (o *MetaProperty) GetAggregatable() bool {
	if o == nil || o.Aggregatable == nil {
		var ret bool
		return ret
	}
	return *o.Aggregatable
}

// GetAggregatableOk returns a tuple with the Aggregatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaProperty) GetAggregatableOk() (*bool, bool) {
	if o == nil || o.Aggregatable == nil {
		return nil, false
	}
	return o.Aggregatable, true
}

// HasAggregatable returns a boolean if a field has been set.
func (o *MetaProperty) HasAggregatable() bool {
	if o != nil && o.Aggregatable != nil {
		return true
	}

	return false
}

// SetAggregatable gets a reference to the given bool and assigns it to the Aggregatable field.
func (o *MetaProperty) SetAggregatable(v bool) {
	o.Aggregatable = &v
}

// GetAnalyzer returns the Analyzer field value if set, zero value otherwise.
func (o *MetaProperty) GetAnalyzer() string {
	if o == nil || o.Analyzer == nil {
		var ret string
		return ret
	}
	return *o.Analyzer
}

// GetAnalyzerOk returns a tuple with the Analyzer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaProperty) GetAnalyzerOk() (*string, bool) {
	if o == nil || o.Analyzer == nil {
		return nil, false
	}
	return o.Analyzer, true
}

// HasAnalyzer returns a boolean if a field has been set.
func (o *MetaProperty) HasAnalyzer() bool {
	if o != nil && o.Analyzer != nil {
		return true
	}

	return false
}

// SetAnalyzer gets a reference to the given string and assigns it to the Analyzer field.
func (o *MetaProperty) SetAnalyzer(v string) {
	o.Analyzer = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *MetaProperty) GetFields() map[string]MetaProperty {
	if o == nil || o.Fields == nil {
		var ret map[string]MetaProperty
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaProperty) GetFieldsOk() (*map[string]MetaProperty, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *MetaProperty) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]MetaProperty and assigns it to the Fields field.
func (o *MetaProperty) SetFields(v map[string]MetaProperty) {
	o.Fields = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *MetaProperty) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaProperty) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *MetaProperty) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *MetaProperty) SetFormat(v string) {
	o.Format = &v
}

// GetHighlightable returns the Highlightable field value if set, zero value otherwise.
func (o *MetaProperty) GetHighlightable() bool {
	if o == nil || o.Highlightable == nil {
		var ret bool
		return ret
	}
	return *o.Highlightable
}

// GetHighlightableOk returns a tuple with the Highlightable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaProperty) GetHighlightableOk() (*bool, bool) {
	if o == nil || o.Highlightable == nil {
		return nil, false
	}
	return o.Highlightable, true
}

// HasHighlightable returns a boolean if a field has been set.
func (o *MetaProperty) HasHighlightable() bool {
	if o != nil && o.Highlightable != nil {
		return true
	}

	return false
}

// SetHighlightable gets a reference to the given bool and assigns it to the Highlightable field.
func (o *MetaProperty) SetHighlightable(v bool) {
	o.Highlightable = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *MetaProperty) GetIndex() bool {
	if o == nil || o.Index == nil {
		var ret bool
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaProperty) GetIndexOk() (*bool, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *MetaProperty) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given bool and assigns it to the Index field.
func (o *MetaProperty) SetIndex(v bool) {
	o.Index = &v
}

// GetSearchAnalyzer returns the SearchAnalyzer field value if set, zero value otherwise.
func (o *MetaProperty) GetSearchAnalyzer() string {
	if o == nil || o.SearchAnalyzer == nil {
		var ret string
		return ret
	}
	return *o.SearchAnalyzer
}

// GetSearchAnalyzerOk returns a tuple with the SearchAnalyzer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaProperty) GetSearchAnalyzerOk() (*string, bool) {
	if o == nil || o.SearchAnalyzer == nil {
		return nil, false
	}
	return o.SearchAnalyzer, true
}

// HasSearchAnalyzer returns a boolean if a field has been set.
func (o *MetaProperty) HasSearchAnalyzer() bool {
	if o != nil && o.SearchAnalyzer != nil {
		return true
	}

	return false
}

// SetSearchAnalyzer gets a reference to the given string and assigns it to the SearchAnalyzer field.
func (o *MetaProperty) SetSearchAnalyzer(v string) {
	o.SearchAnalyzer = &v
}

// GetSortable returns the Sortable field value if set, zero value otherwise.
func (o *MetaProperty) GetSortable() bool {
	if o == nil || o.Sortable == nil {
		var ret bool
		return ret
	}
	return *o.Sortable
}

// GetSortableOk returns a tuple with the Sortable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaProperty) GetSortableOk() (*bool, bool) {
	if o == nil || o.Sortable == nil {
		return nil, false
	}
	return o.Sortable, true
}

// HasSortable returns a boolean if a field has been set.
func (o *MetaProperty) HasSortable() bool {
	if o != nil && o.Sortable != nil {
		return true
	}

	return false
}

// SetSortable gets a reference to the given bool and assigns it to the Sortable field.
func (o *MetaProperty) SetSortable(v bool) {
	o.Sortable = &v
}

// GetStore returns the Store field value if set, zero value otherwise.
func (o *MetaProperty) GetStore() bool {
	if o == nil || o.Store == nil {
		var ret bool
		return ret
	}
	return *o.Store
}

// GetStoreOk returns a tuple with the Store field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaProperty) GetStoreOk() (*bool, bool) {
	if o == nil || o.Store == nil {
		return nil, false
	}
	return o.Store, true
}

// HasStore returns a boolean if a field has been set.
func (o *MetaProperty) HasStore() bool {
	if o != nil && o.Store != nil {
		return true
	}

	return false
}

// SetStore gets a reference to the given bool and assigns it to the Store field.
func (o *MetaProperty) SetStore(v bool) {
	o.Store = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *MetaProperty) GetTimeZone() string {
	if o == nil || o.TimeZone == nil {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaProperty) GetTimeZoneOk() (*string, bool) {
	if o == nil || o.TimeZone == nil {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *MetaProperty) HasTimeZone() bool {
	if o != nil && o.TimeZone != nil {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *MetaProperty) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MetaProperty) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaProperty) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MetaProperty) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MetaProperty) SetType(v string) {
	o.Type = &v
}

func (o MetaProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aggregatable != nil {
		toSerialize["aggregatable"] = o.Aggregatable
	}
	if o.Analyzer != nil {
		toSerialize["analyzer"] = o.Analyzer
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.Highlightable != nil {
		toSerialize["highlightable"] = o.Highlightable
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.SearchAnalyzer != nil {
		toSerialize["search_analyzer"] = o.SearchAnalyzer
	}
	if o.Sortable != nil {
		toSerialize["sortable"] = o.Sortable
	}
	if o.Store != nil {
		toSerialize["store"] = o.Store
	}
	if o.TimeZone != nil {
		toSerialize["time_zone"] = o.TimeZone
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMetaProperty struct {
	value *MetaProperty
	isSet bool
}

func (v NullableMetaProperty) Get() *MetaProperty {
	return v.value
}

func (v *NullableMetaProperty) Set(val *MetaProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaProperty(val *MetaProperty) *NullableMetaProperty {
	return &NullableMetaProperty{value: val, isSet: true}
}

func (v NullableMetaProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


